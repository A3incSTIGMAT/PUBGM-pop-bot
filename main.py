import os
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from datetime import datetime, timedelta

# === –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–ö–ï–ù–ê ===
TOKEN = "8364745841:AAF2g6-4_GVxZRpDzUh-qtatfxp5_gH17QI"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –±–∞–∑—É)
users = {}

# –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
items = {
    "chicken": {"name": "üêî –ö—É—Ä–∏—Ü–∞", "price": 10, "pop": 10},
    "motorcycle": {"name": "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª", "price": 10, "pop": 200},
    "gold": {"name": "üèÖ –°–ª–∏—Ç–æ–∫ –∑–æ–ª–æ—Ç–∞", "price": 20, "pop": 800},
    "car": {"name": "üöó –ú–∞—à–∏–Ω–∫–∞", "price": 50, "pop": 2000},
    "gun": {"name": "üí∞ –î–µ–Ω–µ–∂–Ω–∞—è –ø—É—à–∫–∞", "price": 70, "pop": 3000},
    "kiss": {"name": "üíã –í–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π", "price": 90, "pop": 4000},
    "cup": {"name": "üèÜ –ö—É–±–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", "price": 120, "pop": 6000},
    "plane": {"name": "‚úàÔ∏è –°–∞–º–æ–ª—ë—Ç", "price": 500, "pop": 25000},
    "blimp": {"name": "üéà –î–∏—Ä–∏–∂–∞–±–ª—å", "price": 750, "pop": 50000},
    "helicopter": {"name": "üöÅ –í–µ—Ä—Ç–æ–ª—ë—Ç", "price": 1500, "pop": 125000},
    "private_jet": {"name": "üõ©Ô∏è –ß–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç", "price": 3000, "pop": 300000},
}

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id):
    if user_id not in users:
        users[user_id] = {
            "id": user_id,
            "username": "–ò–≥—Ä–æ–∫",
            "pop": 0,
            "last_daily": None,
            "last_motorcycle": None,
            "referrals": 0,
            "referred_by": None
        }
    return users[user_id]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context):
    user = update.effective_user
    db_user = get_user(user.id)
    db_user["username"] = user.username or user.first_name

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if context.args and context.args[0].startswith("ref_"):
        ref_id = int(context.args[0].split("_")[1])
        if ref_id != user.id and ref_id in users:
            if db_user["referred_by"] is None:
                users[ref_id]["pop"] += 50
                db_user["referred_by"] = ref_id
                await context.bot.send_message(ref_id, "üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +50 –æ—á–∫–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏!")

    keyboard = [
        [InlineKeyboardButton("üî• –ú–æ—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", callback_data="my_pop")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥–∏", callback_data="rating")],
        [InlineKeyboardButton("üí∞ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å", callback_data="gift")],
        [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="ref")],
        [InlineKeyboardButton("üéâ –†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="giveaway")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–°–æ—Ä–µ–≤–Ω—É–π—Å—è –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å, –¥–∞—Ä–∏ –º–æ—â—å, –≤–∑–ª–µ—Ç–∞–π –≤ —Ç–æ–ø!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context):
    query = update.callback_query
    user = query.from_user
    db_user = get_user(user.id)

    if query.data == "my_pop":
        text = (
            f"üìä –¢–≤–æ—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {db_user['pop']} –æ—á–∫–æ–≤\n"
            f"üÜî –¢–≤–æ–π ID: {user.id}\n"
            f"üéØ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–Ω–µ—Ç'}\n\n"
        )
        if db_user["last_daily"]:
            next_daily = datetime.fromisoformat(db_user["last_daily"]) + timedelta(days=1)
            if datetime.now() < next_daily:
                text += "üêî –ö—É—Ä–∏—Ü–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—á–µ—Ä–µ–∑ 23—á 59–º)\n"
            else:
                text += "üêî –ö—É—Ä–∏—Ü–∞: –¥–æ—Å—Ç—É–ø–Ω–∞! /daily\n"
        else:
            text += "üêî –ö—É—Ä–∏—Ü–∞: –¥–æ—Å—Ç—É–ø–Ω–∞! /daily\n"

        if db_user["last_motorcycle"]:
            next_motor = datetime.fromisoformat(db_user["last_motorcycle"]) + timedelta(days=1)
            if datetime.now() < next_motor:
                text += "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—á–µ—Ä–µ–∑ 23—á 59–º)\n"
            else:
                text += "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª: –¥–æ—Å—Ç—É–ø–µ–Ω! /motorcycle\n"
        else:
            text += "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª: –¥–æ—Å—Ç—É–ø–µ–Ω! /motorcycle\n"

        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]))

    elif query.data == "rating":
        top = sorted(users.values(), key=lambda x: x["pop"], reverse=True)[:10]
        text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for i, u in enumerate(top, 1):
            username = u["username"]
            text += f"{i}. @{username} ‚Äî {u['pop']} –æ—á–∫–æ–≤\n"
        text += "\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]))

    elif query.data == "shop":
        text = "üõí –ú–∞–≥–∞–∑–∏–Ω –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:\n\n"
        for item_id, item in items.items():
            text += f"{item['name']} ‚Äî {item['price']}‚ÇΩ ({item['pop']} –æ—á–∫–æ–≤)\n"
        text += "\n–û–ø–ª–∞—Ç–∞: TON (The Open Network)\n"
        text += "–û—Ç–ø—Ä–∞–≤—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
        text += "`UQAx2c...xyz123` (–≤—Å—Ç–∞–≤—å —Å–≤–æ–π TON-–∞–¥—Ä–µ—Å)\n"
        text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–¥–º–∏–Ω—É."
        await query.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]))

    elif query.data == "gift":
        await query.message.edit_text(
            "üéÅ –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:\n"
            "–ù–∞–ø–∏—à–∏: `/gift @username 500`\n"
            "–ì–¥–µ 500 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )

    elif query.data == "ref":
        ref_link = f"https://t.me/PUBGPopBattleBot?start=ref_{user.id}"
        text = (
            f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π +50 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
            f"üìå –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {db_user['referrals']} —á–µ–ª–æ–≤–µ–∫"
        )
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]))

    elif query.data == "giveaway":
        text = (
            "üéâ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à\n\n"
            "–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 20:00 (–ú–°–ö)\n\n"
            "–ü—Ä–∏–∑—ã:\n"
            "1 –º–µ—Å—Ç–æ: +50 000 –æ—á–∫–æ–≤ + –≤–µ—Ä—Ç–æ–ª—ë—Ç\n"
            "2 –º–µ—Å—Ç–æ: +30 000 –æ—á–∫–æ–≤\n"
            "3 –º–µ—Å—Ç–æ: +20 000 –æ—á–∫–æ–≤\n"
            "4‚Äì10: +10 000 –æ—á–∫–æ–≤\n\n"
            "–£—á–∞—Å—Ç–≤—É—é—Ç –≤—Å–µ, –∫—Ç–æ —Å–¥–µ–ª–∞–ª —Ö–æ—Ç—è –±—ã 1 –ø–æ–∫—É–ø–∫—É."
        )
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]))

    elif query.data == "back":
        await query.message.edit_text(
            "üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üî• –ú–æ—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", callback_data="my_pop")],
                [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥–∏", callback_data="rating")],
                [InlineKeyboardButton("üí∞ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
                [InlineKeyboardButton("üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å", callback_data="gift")],
                [InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="ref")],
                [InlineKeyboardButton("üéâ –†–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="giveaway")],
            ])
        )

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫—É—Ä–∏—Ü–∞
async def daily(update: Update, context):
    user = update.effective_user
    db_user = get_user(user.id)
    now = datetime.now()

    if db_user["last_daily"]:
        last = datetime.fromisoformat(db_user["last_daily"])
        if now - last < timedelta(days=1):
            await update.message.reply_text("üêî –ö—É—Ä–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
            return

    db_user["pop"] += 10
    db_user["last_daily"] = now.isoformat()
    await update.message.reply_text("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –æ—á–∫–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –∫—É—Ä–∏—Ü—É!")

# –ú–æ—Ç–æ—Ü–∏–∫–ª
async def motorcycle(update: Update, context):
    user = update.effective_user
    db_user = get_user(user.id)
    now = datetime.now()

    if db_user["last_motorcycle"]:
        last = datetime.fromisoformat(db_user["last_motorcycle"])
        if now - last < timedelta(days=1):
            await update.message.reply_text("üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
            return

    db_user["pop"] += 200
    db_user["last_motorcycle"] = now.isoformat()
    await update.message.reply_text("üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 200 –æ—á–∫–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –º–æ—Ç–æ—Ü–∏–∫–ª!")

# –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
async def gift(update: Update, context):
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gift @username 500")
        return

    target_username = context.args[0].lstrip("@")
    try:
        amount = int(context.args[1])
    except:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user = update.effective_user
    db_user = get_user(user.id)

    if amount <= 0:
        await update.message.reply_text("–ú–∏–Ω–∏–º—É–º ‚Äî 1 –æ—á–∫–æ.")
        return

    if db_user["pop"] < amount:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏.")
        return

    # –ù–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    target_id = None
    for uid, udata in users.items():
        if udata["username"] == target_username:
            target_id = uid
            break

    if not target_id:
        await update.message.reply_text(f"‚ùå –ò–≥—Ä–æ–∫ @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–µ—Ä–µ–≤–æ–¥
    db_user["pop"] -= amount
    users[target_id]["pop"] += amount

    await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥–∞—Ä–∏–ª–∏ {amount} –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫—É @{target_username}!")
    try:
        await context.bot.send_message(target_id, f"üéâ –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ {amount} –æ—á–∫–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –æ—Ç @{user.username or user.first_name}!")
    except:
        pass

# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
async def ref(update: Update, context):
    user = update.effective_user
    db_user = get_user(user.id)
    ref_link = f"https://t.me/PUBGPopBattleBot?start=ref_{user.id}"
    await update.message.reply_text(
        f"ü§ù –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π:\n{ref_link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {db_user['referrals']} —á–µ–ª–æ–≤–µ–∫\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: +50 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ"
    )

# –¢–æ–ø
async def top(update: Update, context):
    top = sorted(users.values(), key=lambda x: x["pop"], reverse=True)[:10]
    text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, u in enumerate(top, 1):
        username = u["username"]
        text += f"{i}. @{username} ‚Äî {u['pop']} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("motorcycle", motorcycle))
    app.add_handler(CommandHandler("gift", gift))
    app.add_handler(CommandHandler("ref", ref))
    app.add_handler(CommandHandler("top", top))

    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()
