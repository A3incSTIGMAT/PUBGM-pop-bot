# bot.py ‚Äî PUBG Mobile: –ë–∏—Ç–≤–∞ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ª–∞–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ SQLite

import sqlite3
import logging
from datetime import date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ===
DB_NAME = "users.db"

def get_db():
    return sqlite3.connect(DB_NAME)

def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    conn = get_db()
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            popular_points INTEGER DEFAULT 0
        )
    """)
    # –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS daily_rewards (
            user_id INTEGER PRIMARY KEY,
            last_chicken DATE,
            last_motorcycle DATE
        )
    """)
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def get_or_create_user(user_id, username):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, username, popular_points) VALUES (?, ?, 0)",
            (user_id, username)
        )
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ daily_rewards
        cursor.execute(
            "INSERT INTO daily_rewards (user_id, last_chicken, last_motorcycle) VALUES (?, NULL, NULL)",
            (user_id,)
        )
    conn.commit()
    conn.close()

def add_points(user_id, points):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET popular_points = popular_points + ? WHERE user_id = ?",
        (points, user_id)
    )
    conn.commit()
    conn.close()

def get_points(user_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT popular_points FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else 0

def get_last_rewards(user_id):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT last_chicken, last_motorcycle FROM daily_rewards WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return {"chicken": row[0], "motorcycle": row[1]}
    return {"chicken": None, "motorcycle": None}

def update_last_reward(user_id, reward_type):
    today = date.today().isoformat()
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(
        f"UPDATE daily_rewards SET last_{reward_type} = ? WHERE user_id = ?",
        (today, user_id)
    )
    conn.commit()
    conn.close()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    get_or_create_user(user.id, user.username)
    
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", callback_data="popular")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="daily")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üéÆ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏—Ç–≤—É –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏!",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "popular":
        points = get_points(user_id)
        await query.edit_m
